name: Deploy Spring Boot (Docker) to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Docker Build & Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t springboot-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag springboot-server ${{ steps.login-ecr.outputs.registry }}/springboot-server:latest

      - name: ECR에 Docker 이미지 push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/springboot-server:latest

      - name: SSH로 EC2에 접속 후 Docker compose 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: false
          port: 22  # ← 여기는 SSH 포트입니다. 8080 아님!
          script: |
            echo "EC2에 접속 성공"
            cd ~/springboot-server
            docker compose pull springboot-server
            docker compose up -d springboot-server